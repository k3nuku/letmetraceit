// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DONGKYUNYOO2E10
// DateTime: 2019-07-24 오전 3:26:21
// UserName: sokdak
// Input file <c.Language.grammar.y - 2019-07-24 오전 3:26:20>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace letmetraceit
{
internal enum Token {error=2,EOF=3,NUMBER=4,PLUS=5,MINUS=6,
    MULTI=7,DIVIDE=8,SHARP=9,BITWISEAND=10,LEFTPAREN=11,RIGHTPAREN=12,
    COMMA=13,DOT=14,COLON=15,SEMICOLON=16,RGT=17,ASSIGN=18,
    LGT=19,LEFTCURLY=20,BITWISEOR=21,RIGHTCURLY=22,BOOLOR=23,WHILE=24,
    SWITCH=25,RETURN=26,OUT=27,IF=28,GOTO=29,FOR=30,
    ELSE=31,ELSEIF=32,CONTINUE=33,CASE=34,BREAK=35,LEGT=36,
    BITWISERIGHT=37,EQUALS=38,BITWISELEFT=39,REGT=40,BOOLAND=41,NOTEQUALS=42,
    INCLUDE=43,STATIC=44,UNSIGNED=45,TYPEVOID=46,TYPECHAR=47,TYPEINT=48,
    TYPELONG=49,TYPEDOUBLE=50,TYPEUCHAR=51,TYPEUINT=52,TYPEULONG=53,TYPEUDOUBLE=54,
    STRUCT=55,VALINT=56,VALID=57,VALFLOAT=58,UMINUS=59,POINTER=60,
    THEN=61};

internal partial struct ValueType
{ 
	public int i;
	public double d; 
	public string s; 
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class cParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[18];
  private static State[] states = new State[5];
  private static string[] nonTerms = new string[] {
      "structure", "$accept", "default_types", "types", "header_include", "header_file", 
      };

  static cParser() {
    states[0] = new State(new int[]{55,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{57,4});
    states[4] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{55,57});
    rules[3] = new Rule(-3, new int[]{46});
    rules[4] = new Rule(-3, new int[]{47});
    rules[5] = new Rule(-3, new int[]{48});
    rules[6] = new Rule(-3, new int[]{49});
    rules[7] = new Rule(-3, new int[]{50});
    rules[8] = new Rule(-4, new int[]{-3});
    rules[9] = new Rule(-4, new int[]{45,-3});
    rules[10] = new Rule(-4, new int[]{51});
    rules[11] = new Rule(-4, new int[]{52});
    rules[12] = new Rule(-4, new int[]{53});
    rules[13] = new Rule(-4, new int[]{54});
    rules[14] = new Rule(-4, new int[]{-1});
    rules[15] = new Rule(-5, new int[]{9,43,17,-6,19});
    rules[16] = new Rule(-6, new int[]{57,14,57});
    rules[17] = new Rule(-6, new int[]{57,8,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 15: // header_include -> SHARP, INCLUDE, RGT, header_file, LGT
{
	Console.WriteLine("including header at {0}", ValueStack[ValueStack.Depth-2].s);
}
        break;
      case 16: // header_file -> VALID, DOT, VALID
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-3].s + "." + ValueStack[ValueStack.Depth-1].s; }
        break;
      case 17: // header_file -> VALID, DIVIDE, header_file
{ CurrentSemanticValue.s = ValueStack[ValueStack.Depth-3].s + "/" + ValueStack[ValueStack.Depth-1].s; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public cParser(cScanner sc): base(sc) {}
}
}
